import os
import time
import tempfile
import keyboard
import io
import requests
from twilio.rest import Client
from google.cloud import texttospeech
import pygame
import speech_recognition as sr
import googlemaps
import winsound
from bs4 import BeautifulSoup

# --- Configurations ---
GOOGLE_TTS_JSON = r"C:\\Users\\admin\\Desktop\\stt\\project2\\text-to-speech-455413-09c4f83b2fbd.json"
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = GOOGLE_TTS_JSON

# Google Maps API
MAPS_API_KEY = "AIzaSyDNRHZ0bLIfV-7-FJK3V0_O4i11de4-12A"
gmaps = googlemaps.Client(key=MAPS_API_KEY)

# Telegram
TELEGRAM_BOT_TOKEN = "7722919054:AAFYKU9dSpg-i_xTBpFJk66fHdwV0Hd8f0"
TELEGRAM_CHAT_ID = "6338596536"

# Twilio
TWILIO_SID = "ACb4fb756c1c4c5ccd0329ce491249379d"
TWILIO_AUTH_TOKEN = "2995cd7cec404f455524193d0dbf64b6"
TWILIO_WHATSAPP_NUMBER = "whatsapp:+14155238886"
EMERGENCY_CONTACT = "whatsapp:+917338995840"

# Location
latitude = "12.9715987"
longitude = "77.5945627"
location_link = f"https://www.google.com/maps/search/?api=1&query={latitude},{longitude}"

# Setup pygame
pygame.init()
pygame.mixer.init()

# --- TTS Function ---
def speak(text):
    try:
        client = texttospeech.TextToSpeechClient()
        synthesis_input = texttospeech.SynthesisInput(text=text)
        voice = texttospeech.VoiceSelectionParams(language_code="ta-IN", ssml_gender=texttospeech.SsmlVoiceGender.FEMALE)
        audio_config = texttospeech.AudioConfig(audio_encoding=texttospeech.AudioEncoding.MP3)
        response = client.synthesize_speech(input=synthesis_input, voice=voice, audio_config=audio_config)

        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as tmp:
            tmp.write(response.audio_content)
            tmp_path = tmp.name

        pygame.mixer.music.load(tmp_path)
        pygame.mixer.music.play()
        while pygame.mixer.music.get_busy():
            if keyboard.is_pressed("0"):
                pygame.mixer.music.stop()
                pygame.mixer.music.unload()
                os.remove(tmp_path)
                speak("роорпБродройрпНроорпИ роорпЖройрпБро╡рпБроХрпНроХрпБ родро┐ро░рпБроорпНрокрпБроХро┐ро▒рпЛроорпН.")
                raise KeyboardInterrupt
            time.sleep(0.1)

        pygame.mixer.music.stop()
        pygame.mixer.music.unload()
        os.remove(tmp_path)

    except Exception as e:
        print(f"TTS Error: {e}")
        print(text)

# --- Beep ---
def beep():
    winsound.Beep(1000, 200)

# --- Voice input ---
def get_voice_input(prompt):
    recognizer = sr.Recognizer()
    mic = sr.Microphone()
    speak(prompt)
    beep()
    try:
        with mic as source:
            recognizer.adjust_for_ambient_noise(source, duration=1)
            try:
                print("ЁЯОд Listening...")
                audio = recognizer.listen(source, timeout=5, phrase_time_limit=7)
                text = recognizer.recognize_google(audio, language="ta-IN")
                print("ЁЯЧгя╕П You said:", text)
                return text
            except sr.WaitTimeoutError:
                speak("роХрпЗроЯрпНроХ роЗропро▓ро╡ро┐ро▓рпНро▓рпИ. родропро╡рпБроЪрпЖропрпНродрпБ роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.")
            except sr.UnknownValueError:
                speak("рокрпБро░ро┐ропро╡ро┐ро▓рпНро▓рпИ. роорпАрогрпНроЯрпБроорпН роХрпВро▒ро╡рпБроорпН.")
            except sr.RequestError as e:
                speak("роЗрогрпИроп рокро┐ро░роЪрпНроЪройрпИ. роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.")
                print("API Error:", e)
    except Exception as e:
        speak("роорпИроХрпНро░рпЛроГрокрпЛройро┐ро▓рпН рокро┐ро┤рпИ роПро▒рпНрокроЯрпНроЯродрпБ.")
        print("Microphone Error:", e)

    return None

# --- Check for main menu key ---
def check_for_main_menu():
    if keyboard.is_pressed("0"):
        speak("роорпБродройрпНроорпИ роорпЖройрпБ: 1 роЕро┤рпБродрпНродро┐ ро╡ро┤ро┐роХро╛роЯрпНроЯро▓рпН родрпКроЯроЩрпНроХро╡рпБроорпН, 2 роЕро┤рпБродрпНродро┐ SOS роЪрпЖропро▓рпНрокроЯрпБродрпНродро╡рпБроорпН, 0 роЕро┤рпБродрпНродро┐ ро╡рпЖро│ро┐ропрпЗро▒ро╡рпБроорпН.")
        return True
    return False

# --- Navigation ---
def get_directions(destination):
    try:
        directions = gmaps.directions("Saveetha Engineering College", destination, mode="walking")
        return directions[0]['legs'][0]['steps'] if directions else None
    except Exception as e:
        print("Error:", e)
        return None

translations = {
    "Turn left": "роЗроЯродрпБрокрпБро▒роорпН родро┐ро░рпБроорпНрокро╡рпБроорпН",
    "Turn right": "ро╡ро▓родрпБрокрпБро▒роорпН родро┐ро░рпБроорпНрокро╡рпБроорпН",
    "Go straight": "роирпЗро░ро╛роХ роЪрпЖро▓рпНро▓ро╡рпБроорпН",
    "Head north": "ро╡роЯроХрпНроХрпЗ роЪрпЖро▓рпНро▓ро╡рпБроорпН",
    "Head south": "родрпЖро▒рпНроХрпЗ роЪрпЖро▓рпНро▓ро╡рпБроорпН",
    "Head east": "роХро┐ро┤роХрпНроХрпЗ роЪрпЖро▓рпНро▓ро╡рпБроорпН",
    "Head west": "роорпЗро▒рпНроХрпЗ роЪрпЖро▓рпНро▓ро╡рпБроорпН",
    "Continue straight": "роирпЗро░ро╛роХ родрпКроЯро░рпНроирпНродрпБ роЪрпЖро▓рпНро▓ро╡рпБроорпН",
    "Take the exit": "ро╡рпЖро│ро┐ропрпЗро▒рпБроорпН рокро╛родрпИропрпИ роОроЯрпБроХрпНроХро╡рпБроорпН",
    "Make a U-turn": "ропрпБ-роЯро░рпНройрпН роОроЯрпБроХрпНроХро╡рпБроорпН"
}

def clean_html_instruction(html_text):
    soup = BeautifulSoup(html_text, "html.parser")
    return soup.get_text()

def translate_instruction(text):
    for eng, tam in translations.items():
        text = text.replace(eng, tam)
    return text

def start_navigation():
    while True:
        destination = get_voice_input("роЙроЩрпНроХро│рпН роЗро▓роХрпНроХрпИ роХрпВро▒рпБроЩрпНроХро│рпН.")
        if destination:
            speak(f"роирпАроЩрпНроХро│рпН роХрпВро▒ро┐роп роЗроЯроорпН: {destination}. роЪро░ро┐ропро╛? роЪро░ро┐ропро╛ройро╛ро▓рпН 1 роЕро┤рпБродрпНродро╡рпБроорпН, родро╡ро▒ро╛ройро╛ро▓рпН 2 роЕро┤рпБродрпНродро╡рпБроорпН.")
            while True:
                if check_for_main_menu():
                    return
                if keyboard.is_pressed("1"):
                    steps = get_directions(destination)
                    if steps:
                        for step in steps:
                            if check_for_main_menu():
                                return
                            instr_raw = step['html_instructions']
                            instr = clean_html_instruction(instr_raw)
                            instr = translate_instruction(instr)
                            speak(instr)
                            time.sleep(2)
                        speak("роирпАроЩрпНроХро│рпН роЗро▓роХрпНроХрпИ роЕроЯрпИроирпНродрпБро╡ро┐роЯрпНроЯрпАро░рпНроХро│рпН.")
                    return
                elif keyboard.is_pressed("2"):
                    speak("роорпАрогрпНроЯрпБроорпН роЗроЯродрпНродрпИ роХрпВро▒рпБроЩрпНроХро│рпН.")
                    break
                time.sleep(0.1)

# --- SOS Message ---
def send_sos(button):
    client = Client(TWILIO_SID, TWILIO_AUTH_TOKEN)
    if button == 1:
        msg = "ЁЯЪи POLICE CALL ЁЯЪи"
        number = "100"
    elif button == 2:
        msg = "ЁЯЪС AMBULANCE CALL ЁЯЪС"
        number = "108"
    elif button == 3:
        msg = "ЁЯФе FIRE DEPT CALL ЁЯФе"
        number = "101"
    else:
        msg = "тЭМ UNKNOWN EMERGENCY тЭМ"
        number = "N/A"

    body = f"{msg}\nHelp Needed!\nЁЯУН Location: {location_link}\nЁЯУЮ Emergency Number: {number}"
    client.messages.create(body=body, from_=TWILIO_WHATSAPP_NUMBER, to=EMERGENCY_CONTACT)
    speak(f"{msg} роХрпБро▒рпБроЮрпНроЪрпЖропрпНродро┐ роЕройрпБрокрпНрокрокрпНрокроЯрпНроЯрпБро│рпНро│родрпБ.")

# --- SOS Menu ---
def sos_menu():
    speak("SOS роЪрпЖропро▓рпНрокроЯрпБродрпНродрокрпНрокроЯрпНроЯродрпБ.роЙродро╡ро┐роХрпНроХро╛роХ 1 рокрпЛро▓рпАроЪрпБроХрпНроХрпБ, 2 роЖроорпНрокрпБро▓ройрпНро╕рпБроХрпНроХрпБ, 3 родрпАропрогрпИрокрпНрокрпБ рокроЯрпИроХрпНроХрпБ роЕро┤рпБродрпНродро╡рпБроорпН,роорпБродройрпНроорпИ роорпЖройрпБро╡рпБроХрпНроХрпБ родро┐ро░рпБроорпНрок 0 роЕро┤рпБродрпНродро╡рпБроорпН.")
    while True:
        if check_for_main_menu():
            return
        if keyboard.is_pressed("1"):
            send_sos(1)
            time.sleep(1)
        elif keyboard.is_pressed("2"):
            send_sos(2)
            time.sleep(1)
        elif keyboard.is_pressed("3"):
            send_sos(3)
            time.sleep(1)
        time.sleep(0.1)

# --- Main Program ---
def main_menu():
    speak("ро╡рогроХрпНроХроорпН! 1 роЕро┤рпБродрпНродро┐ ро╡ро┤ро┐роХро╛роЯрпНроЯро▓рпН родрпКроЯроЩрпНроХро╡рпБроорпН, 2 роЕро┤рпБродрпНродро┐ SOS роЪрпЖропро▓рпНрокроЯрпБродрпНродро╡рпБроорпН, 0 роЕро┤рпБродрпНродро┐ ро╡рпЖро│ро┐ропрпЗро▒ро╡рпБроорпН.")
    while True:
        if keyboard.is_pressed("1"):
            speak("ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпН родрпКроЯроЩрпНроХрпБроХро┐ро▒родрпБ.")
            start_navigation()
        elif keyboard.is_pressed("2"):
            speak("SOS роЪрпЖропро▓рпНрокроЯрпБродрпНродрокрпНрокроЯрпБроХро┐ро▒родрпБ.")
            sos_menu()
        elif keyboard.is_pressed("0"):
            speak("роиройрпНро▒ро┐. ро╡рпЖро│ро┐ропрпЗро▒рпБроХро┐ро▒рпАро░рпНроХро│рпН.")
            exit()
        time.sleep(0.1)

if __name__ == "__main__":
    try:
        while True:
            main_menu()
    except KeyboardInterrupt:
        speak("роиройрпНро▒ро┐. роирпАроЩрпНроХро│рпН роЪрпЖропро▓ро┐ропрпИ роиро┐ро▒рпБродрпНродро┐ро╡ро┐роЯрпНроЯрпАро░рпНроХро│рпН.")
        exit()
